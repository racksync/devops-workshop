stages:
  - build
  - test
  - deploy

variables:
  CONTAINER_NAME: html-demo
  CONTAINER_PORT: 80
  HOST_PORT: 8085
  DOCKER_TLS_CERTDIR: ""
  # Use local Docker socket
  DOCKER_HOST: unix:///var/run/docker.sock

# Cache for node modules if needed
cache:
  paths:
    - node_modules/

# Build the Docker image
build:
  stage: build
  tags:
    - html
  script:
    - echo "Building Docker image...."
    - docker build -t $CONTAINER_NAME:$CI_COMMIT_SHORT_SHA .
    - docker tag $CONTAINER_NAME:$CI_COMMIT_SHORT_SHA $CONTAINER_NAME:latest
    - echo "Docker image built successfully"

# Run tests on the HTML files
test:
  stage: test
  tags:
    - html
  script:
    - echo "Testing HTML files..."
    - |
      if command -v html-validator-cli > /dev/null 2>&1; then
        echo "HTML validator is installed, running validation..."
        html-validator-cli --file index.html || echo "Warning: Issues found in index.html"
        html-validator-cli --file devops.html || echo "Warning: Issues found in devops.html"
        html-validator-cli --file racksync.html || echo "Warning: Issues found in racksync.html"
      else
        echo "HTML validator not installed, skipping validation..."
      fi
    - echo "Tests completed"

# Deploy the application by running the Docker container
deploy:
  stage: deploy
  tags:
    - html
  environment:
    name: production
    url: http://$CI_SERVER_HOST:$HOST_PORT
  script:
    - echo "Deploying application to production environment..."
    # Stop and remove any existing container with the same name
    - docker stop $CONTAINER_NAME || true
    - docker rm $CONTAINER_NAME || true
    # Run the newly built container
    - >
      docker run -d
      --name $CONTAINER_NAME
      -p $HOST_PORT:$CONTAINER_PORT
      --restart unless-stopped
      $CONTAINER_NAME:$CI_COMMIT_SHORT_SHA
    - echo "Application deployed successfully at http://$(hostname -I | awk '{print $1}'):$HOST_PORT"
  only:
    - main  # Deploy only when pushing to main branch

# Self-hosted Runner setup instructions:
# 1. Install GitLab Runner on the destination server:
#    - For Linux: https://docs.gitlab.com/runner/install/linux-repository.html
#    - For macOS: brew install gitlab-runner
#    - For Windows: https://docs.gitlab.com/runner/install/windows.html
#
# 2. Register the runner with shell executor:
#    gitlab-runner register \
#      --url https://gitlab.com/ \
#      --registration-token YOUR_REGISTRATION_TOKEN \
#      --description "My Docker Runner" \
#      --tag-list "shell,self-hosted" \
#      --executor "shell"
#
# 3. Make sure Docker is installed on the runner machine
#
# 4. Ensure the GitLab Runner user has permission to use Docker:
#    sudo usermod -aG docker gitlab-runner
#    newgrp docker
#
# 5. Start/Restart the runner
#    sudo systemctl restart gitlab-runner  # Linux
#    or
#    brew services restart gitlab-runner  # macOS
